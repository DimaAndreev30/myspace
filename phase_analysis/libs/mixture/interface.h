#pragma once

#include <vector>


namespace MySpace::PhAn {
    
    // TODO: возможность сочетать в одном классе несколько составов
    // причем так, что бы изменения в классах наследниках были минимальны.
    // При этом класс должен будет разделиться на два, 
    // и в основном метод setCompos должен стать const, так что бы
    // я мог передавать всюду константную ссылку на интерфейс.
    
    // Обобщенный класс для вычисления термодинамических свойств растворов.
    //
    // Класс содержит несколько типов функций:
    //  - геттеры (getN и пр.)
    //  - функции настройки (индивидуальны для конкретных реализаций)
    //  - функция установки (setCompos)
    //  - функции расчета (getPhi и пр.)
    // Главное правило: вызов функций расчета должен идти строго после вызова 
    // функции установки, и ними не должно быть вызовов функций настройки.
    // В противном случае <undefined behavior>.
    // Реализовывать контроль за этим внутри класса мне показалось лишним, так что 
    // это остается на пользователе.
    class MixtureInterface {
    public:
        enum Traits {
            AS_LIQUID,
            AS_VAPOR
        };
        
        enum Status {
            OK,
            INCORRECT_COMPOS,
            EOS_ERROR
        };
        
    public:
        virtual ~MixtureInterface() {
        }
        
    public:
        // Число компонент в растворе:
        virtual int getN() const = 0;
        
        // Установить состав смеси:
        virtual Status setCompos(const std::vector<double>& c, Traits trait) = 0;
        
        // Летучесть i-ой компоненты:
        virtual double getPhi(int i) const = 0;
    };
    
} // namespace MySpace::PhAn;